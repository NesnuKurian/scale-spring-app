name: Spring-Scale-app

on:
  push:
    branches:
      - main

jobs: 
  clone:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.1
        with:
          depth: 1
          branch: 'main'
          owner: 'nesnukurian'
          repository: 'scale-spring-app'
  
  build:
    runs-on: ubuntu-latest
    needs: clone

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build the application with Maven
        run: |
          mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile 
          push: true
          tags: nesnukurian/scale-spring-app-new:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1  # Change to your desired region

      - name: Deploy to EC2
        run: |
          # Fetch the existing instance ID based on the tag Name
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=SpringBootApp" --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId" --output text)

          # Check if an instance ID was found
          if [ -z "$INSTANCE_ID" ]; then
            echo "No running instance found, creating a new EC2 instance..."
            INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe1f0 --count 1 --instance-type t2.micro --key-name your-key-pair --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=SpringBootApp}]' --query "Instances[0].InstanceId" --output text)
            echo "EC2 Instance created: $INSTANCE_ID"
          else
            echo "Using existing EC2 instance: $INSTANCE_ID"
          fi

          # Wait for the instance to be running
          echo "Waiting for instance $INSTANCE_ID to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Install Docker and run the container
          echo "Sending SSH public key for EC2 Instance Connect..."
          aws ec2-instance-connect send-ssh-public-key --instance-id $INSTANCE_ID --instance-os-user ec2-user --ssh-public-key file://~/.ssh/id_rsa.pub

          # Install Docker and run the application
          echo "Running deployment commands on EC2..."
          aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=instanceids,Values=$INSTANCE_ID" --parameters 'commands=["sudo yum update -y", "sudo amazon-linux-extras install docker -y", "sudo service docker start", "sudo docker pull nesnukurian/scale-spring-app-new:latest", "sudo docker run -d -p 8080:8080 nesnukurian/scale-spring-app-new:latest"]' --comment "Deploying Spring Boot App"
